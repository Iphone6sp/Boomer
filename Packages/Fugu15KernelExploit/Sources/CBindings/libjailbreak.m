#include <dlfcn.h>
#import <Foundation/Foundation.h>
#import <IOKit/IOKitLib.h>

void *libJailbreakHandle = NULL;

NSString *fakeRootPath(NSString *path)
{
	static NSString *sFakerootPrefix = nil;
	static dispatch_once_t onceToken;
	dispatch_once (&onceToken, ^{
		NSArray *candidateItems = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:@"/var/containers/Bundle" error:nil];
		for (NSString *candidateItem in candidateItems) {
			if ([candidateItem hasPrefix:@"jb-"]) {
				sFakerootPrefix = [[@"/var/containers/Bundle" stringByAppendingPathComponent:candidateItem] stringByAppendingPathComponent:@"procursus"];
				return;
			}
		}

		// LEGACY CODE, only needed because user might have jbupdated and hasn't fully rejailbroken yet
		NSMutableString* bootManifestHashStr;
		io_registry_entry_t registryEntry = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/chosen");
		if (registryEntry) {
			CFDataRef bootManifestHash = (CFDataRef)IORegistryEntryCreateCFProperty(registryEntry, CFSTR("boot-manifest-hash"), kCFAllocatorDefault, 0);
			if (bootManifestHash) {
				const UInt8* buffer = CFDataGetBytePtr(bootManifestHash);
				bootManifestHashStr = [NSMutableString stringWithCapacity:(CFDataGetLength(bootManifestHash) * 2)];
				for (CFIndex i = 0; i < CFDataGetLength(bootManifestHash); i++) {
					[bootManifestHashStr appendFormat:@"%02X", buffer[i]];
				}
				CFRelease(bootManifestHash);
			}
		}

		if (bootManifestHashStr) {
			NSString *activePrebootPath = [@"/private/preboot/" stringByAppendingPathComponent:bootManifestHashStr];
			NSArray *subItems = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:activePrebootPath error:nil];
			for (NSString *subItem in subItems) {
				if ([subItem hasPrefix:@"jb-"]) {
					sFakerootPrefix = [[activePrebootPath stringByAppendingPathComponent:subItem] stringByAppendingPathComponent:@"procursus"];
					return;
				}
			}
		}
		// END LEGACY CODE

		sFakerootPrefix = @"/var/jb";
	});

	if (path) {
		return [sFakerootPrefix stringByAppendingPathComponent:path];
	}
	else {
		return sFakerootPrefix;
	}
}

void *loadLibJailbreak(void)
{
	if (libJailbreakHandle) return libJailbreakHandle;
	libJailbreakHandle = dlopen(fakeRootPath(@"basebin/libjailbreak.dylib").UTF8String, RTLD_NOW);
	return libJailbreakHandle;
}